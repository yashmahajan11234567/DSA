#include &lt;iostream&gt;
using namespace std;

struct Employee {
int id;
string name;
Employee* next;
Employee(int id, string name) : id(id), name(name), next(NULL) {}
};

class HashTable {
int size;
Employee** table;

int hashFunction(int id) {
return id % size;
}

public:
HashTable(int size) : size(size) {
table = new Employee*[size];
for (int i = 0; i &lt; size; ++i) table[i] = NULL;
}

void insert(int id, string name) {
int index = hashFunction(id);
Employee* newEmployee = new Employee(id, name);
newEmployee-&gt;next = table[index];

table[index] = newEmployee;
}

string search(int id) {
int index = hashFunction(id);
Employee* current = table[index];
while (current) {
if (current-&gt;id == id) return current-&gt;name;
current = current-&gt;next;
}
return &quot;Employee not found&quot;;
}

void remove(int id) {
int index = hashFunction(id);
Employee* current = table[index];
Employee* prev = NULL;
while (current &amp;&amp; current-&gt;id != id) {
prev = current;
current = current-&gt;next;
}
if (!current) return;
if (!prev) table[index] = current-&gt;next;
else prev-&gt;next = current-&gt;next;
delete current;
}

~HashTable() {
for (int i = 0; i &lt; size; ++i) {

Employee* current = table[i];
while (current) {
Employee* temp = current;
current = current-&gt;next;
delete temp;
}
}
delete[] table;
}
};

int main() {
HashTable employees(10);
employees.insert(289, &quot;yash&quot;);
employees.insert(287, &quot;ruturaj&quot;);
employees.insert(280, &quot;vivek&quot;);
cout &lt;&lt; employees.search(289) &lt;&lt; endl;
employees.remove(289);
cout &lt;&lt; employees.search(289) &lt;&lt; endl;
return 0;
}
