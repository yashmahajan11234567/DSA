#include <iostream>
using namespace std;
struct Node {
    int data;
    Node* next;
};
Node* createNode(int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void insertBeg(Node*& head, int data) {
    Node* newNode = createNode(data);
    if (!head) {
        head = newNode;
        newNode->next = head;  // Circular link
        return;
    }

    Node* temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    newNode->next = head;
    temp->next = newNode;
    head = newNode;
}
void insertEnd(Node*& head, int data) {
    Node* newNode = createNode(data);
    if (!head) {
        head = newNode;
        newNode->next = head;  
        return;
    }

    Node* temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->next = head;
}
void deleteNode(Node*& head, int key) {
    if (!head) {
        cout << "List is empty." << endl;
        return;
    }
    if (head->data == key) {
        if (head->next == head) {
            delete head;  
            head = NULL;
            return;
        }

        Node* temp = head;
        Node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        last->next = head->next;
        head = head->next;
        delete temp;
        return;
    }
    Node* temp = head;
    Node* prev = NULL;
    do {
        prev = temp;
        temp = temp->next;
    } while (temp != head && temp->data != key);

    if (temp == head) {
        cout << "Node with value " << key << " not found." << endl;
        return;
    }

    prev->next = temp->next;
    delete temp;
}
void displayList(Node* head) {
    if (!head) {
        cout << "List is empty." << endl;
        return;
    }

    Node* temp = head;
    do {
        cout << temp->data << " ";
        temp = temp->next;
    } while (temp != head);
    cout << endl;
}

int main() {
    Node* head = NULL;
    insertBeg(head, 10);
    insertEnd(head, 20);
    insertEnd(head, 30);
    insertBeg(head, 5);

    cout << "Circular Linked List: ";
    displayList(head);
    deleteNode(head, 20);
    cout << "After deleting 20: ";
    displayList(head);

    return 0;
}
